name: release

on:
  # Build/Release on demand
  workflow_dispatch:
    is_snapshot_release:
      description: "Release Snapshot?"
      required: true
      default: false
      type: boolean
  # Nightly releases
  schedule:
    - cron: "45 8 * * 1-5"
  push:
    tags:
      - "*" # Tags that trigger a new release version

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Needed by goreleaser to browse history.
      - name: Set up go
        uses: actions/setup-go@v3
        with:
          go-version-file: ./go.mod
          cache: true
      - name: Build the module
        run: go build -v ./...
      - name: Run all tests
        run: go test -v ./...
  release-snapshot:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ inputs.is_snapshot_release || github.event.schedule }}
    steps:
      - name: Build snapshot with goreleaser
        uses: goreleaser/goreleaser-action@v3
        with:
          distribution: goreleaser
          version: latest
          args: release --rm-dist --skip-publish --snapshot
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Determine snapshot tag
        run: |
          TAG=$(ls dist/*_linux_386.tar.gz | cut -d '_' -f 2 | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+-dev')
          echo "release_tag=$TAG" >> $GITHUB_ENV
      - name: Publish snapshot release to GitHub
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          fail_on_unmatched_files: true
          tag_name: ${{ env.release_tag }}
          files: |
            dist/checksums.txt
            dist/*.tar.gz
  release:
    runs-on: ubuntu-latest
    needs: build
    # Only release when there's a tag for the release.
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Release with goreleaser
        uses: goreleaser/goreleaser-action@v3
        with:
          distribution: goreleaser
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
